# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

# these are events that triggers this workflow/pipeline
on:
  push:
    branches: [ "main", "six-angular" ]
  pull_request:
    branches: [ "main" ]
    # this allows me to manually trigger this workflow
  workflow_dispatch:

# way to create environment variables
env:
  WORKING_DIRECTORY : Flashcards

# Jobs are the step by step instruction to your runner/VM on what to do
jobs:
# Name of this job
  build:

# Which OS should this run on
    runs-on: ubuntu-latest

# The actual instruction you give the machine to execute
    steps:
    # download your source code- equivalent to your git clone command
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    # download .NET SDK to your runner
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir ./.sonar/scanner 
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
  
    # equivalent to doing dotnet restore in your commandline
    # dotnet restore will download all your dependencies and make sure all your project references are correctly configured
    # equivalent to doing npm install
    - name: Restore dependencies
      run: |
        cd ${{env.WORKING_DIRECTORY}}
        dotnet restore
    # equivalent to you doing dotnet build
    - name: Build
      run: dotnet build --no-restore ${{env.WORKING_DIRECTORY}}
    # running dotnet test
    - name: Test
      run: dotnet test --no-build --verbosity normal ${{env.WORKING_DIRECTORY}}

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"220926NET_trainer-code" /o:"220926net" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-restore ${{env.WORKING_DIRECTORY}}
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
